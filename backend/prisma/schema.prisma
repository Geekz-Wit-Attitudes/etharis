// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?
  wallet         String?
  email_verified Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Token            Token[]
  Wallet           Wallet?
  brandContracts   Contract[] @relation("BrandContracts")
  creatorContracts Contract[] @relation("CreatorContracts")
  Review           Review[]

  @@map("users")
}

model Token {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  type      TokenType @default(REFRESH)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("tokens")
}

model Wallet {
  id               String   @id @default(cuid())
  userId           String   @unique
  address          String   @unique
  encryptedPrivKey String
  createdAt        DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model Contract {
  id        String         @id @unique
  social    String
  brief     String
  amount    Decimal        @db.Decimal(20, 2)
  deadline  DateTime
  createdAt DateTime       @default(now())
  status    ContractStatus @default(PENDING)

  // Relations
  brandId          String?
  creatorId        String?
  brand            User?             @relation("BrandContracts", fields: [brandId], references: [id])
  creator          User?             @relation("CreatorContracts", fields: [creatorId], references: [id])
  verificationLogs VerificationLog[]
  disputes         Dispute[]
  transactions     Transaction[]
  Review           Review[]

  @@map("contracts")
}

model VerificationLog {
  id               Int                @id @default(autoincrement())
  contractId       String
  content          String
  verifiedAt       DateTime           @default(now())
  contentTimestamp DateTime
  result           VerificationResult

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("verification_logs")
}

model Dispute {
  id            Int            @id @default(autoincrement())
  contractId    String
  reason        String
  evidence      String
  disputedAt    DateTime       @default(now())
  resolvedAt    DateTime?
  disputedBy    DisputeBy
  creatorChoice DisputeChoice?

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([contractId, disputedBy], name: "one_dispute_per_user_per_contract")
  @@map("disputes")
}

model Transaction {
  id         Int               @id @default(autoincrement())
  contractId String
  txHash     String?
  amount     Decimal           @db.Decimal(20, 2)
  createdAt  DateTime          @default(now())
  type       TransactionType
  status     TransactionStatus @default(PENDING)

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Review {
  id         Int      @id @default(autoincrement())
  contractId String
  reviewerId String
  rating     Int // 1-5 scale
  comment    String?
  createdAt  DateTime @default(now())

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reviewer User     @relation(fields: [reviewerId], references: [id])

  @@unique([contractId, reviewerId], name: "one_review_per_user_per_contract")
  @@map("reviews")
}

enum TokenType {
  ACCESS
  REFRESH
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum DisputeBy {
  BRAND
  CREATOR
}

enum ContractStatus {
  PENDING
  ACTIVE
  CANCELLED
  COMPLETED
  DISPUTED
}

enum DisputeChoice {
  FIFTY_FIFTY  @map("50/50")
  ZERO_HUNDRED @map("0/100")
}

enum TransactionType {
  DEPOSIT
  RELEASE
  REFUND
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum VerificationResult {
  ON_TIME
  LATE
  DELETED
  NOT_FOUND
}
